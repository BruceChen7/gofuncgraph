// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type UfuncgraphEvent struct {
	StackId    uint64
	CallerIp   uint64
	Ip         uint64
	TimeNs     uint64
	StackDepth uint16
	Location   uint8
	Errno      uint8
	Bt         [400]uint8
	Data       [100]uint8
}

// LoadUfuncgraph returns the embedded CollectionSpec for Ufuncgraph.
func LoadUfuncgraph() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UfuncgraphBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Ufuncgraph: %w", err)
	}

	return spec, err
}

// LoadUfuncgraphObjects loads Ufuncgraph and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *UfuncgraphObjects
//     *UfuncgraphPrograms
//     *UfuncgraphMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadUfuncgraphObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadUfuncgraph()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// UfuncgraphSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UfuncgraphSpecs struct {
	UfuncgraphProgramSpecs
	UfuncgraphMapSpecs
}

// UfuncgraphSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UfuncgraphProgramSpecs struct {
	C_ent   *ebpf.ProgramSpec `ebpf:"c_ent"`
	C_entBt *ebpf.ProgramSpec `ebpf:"c_ent_bt"`
	C_ret   *ebpf.ProgramSpec `ebpf:"c_ret"`
	GoEnt   *ebpf.ProgramSpec `ebpf:"go_ent"`
	GoEntBt *ebpf.ProgramSpec `ebpf:"go_ent_bt"`
	GoRet   *ebpf.ProgramSpec `ebpf:"go_ret"`
}

// UfuncgraphMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type UfuncgraphMapSpecs struct {
	BpfStack   *ebpf.MapSpec `ebpf:"bpf_stack"`
	EventQueue *ebpf.MapSpec `ebpf:"event_queue"`
	Goids      *ebpf.MapSpec `ebpf:"goids"`
}

// UfuncgraphObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadUfuncgraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type UfuncgraphObjects struct {
	UfuncgraphPrograms
	UfuncgraphMaps
}

func (o *UfuncgraphObjects) Close() error {
	return _UfuncgraphClose(
		&o.UfuncgraphPrograms,
		&o.UfuncgraphMaps,
	)
}

// UfuncgraphMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadUfuncgraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type UfuncgraphMaps struct {
	BpfStack   *ebpf.Map `ebpf:"bpf_stack"`
	EventQueue *ebpf.Map `ebpf:"event_queue"`
	Goids      *ebpf.Map `ebpf:"goids"`
}

func (m *UfuncgraphMaps) Close() error {
	return _UfuncgraphClose(
		m.BpfStack,
		m.EventQueue,
		m.Goids,
	)
}

// UfuncgraphPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadUfuncgraphObjects or ebpf.CollectionSpec.LoadAndAssign.
type UfuncgraphPrograms struct {
	C_ent   *ebpf.Program `ebpf:"c_ent"`
	C_entBt *ebpf.Program `ebpf:"c_ent_bt"`
	C_ret   *ebpf.Program `ebpf:"c_ret"`
	GoEnt   *ebpf.Program `ebpf:"go_ent"`
	GoEntBt *ebpf.Program `ebpf:"go_ent_bt"`
	GoRet   *ebpf.Program `ebpf:"go_ret"`
}

func (p *UfuncgraphPrograms) Close() error {
	return _UfuncgraphClose(
		p.C_ent,
		p.C_entBt,
		p.C_ret,
		p.GoEnt,
		p.GoEntBt,
		p.GoRet,
	)
}

func _UfuncgraphClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed ufuncgraph_bpfel_x86.o
var _UfuncgraphBytes []byte
